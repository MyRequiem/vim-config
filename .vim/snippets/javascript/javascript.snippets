snippet meta    meta info
	// ==UserScript==
	// @name            ${1}
	// @namespace       https://github.com/MyRequiem/comfortablePlayingInGW
	// @description     
	// @id              comfortablePlayingInGW@MyRequiem
	// @updateURL       https://raw.githubusercontent.com/MyRequiem/comfortablePlayingInGW/master/separatedScripts/${1}/${2}.meta.js
	// @downloadURL     https://raw.githubusercontent.com/MyRequiem/comfortablePlayingInGW/master/separatedScripts/${1}/${2}.user.js
	// @include
	// @grant           none
	// @license         MIT
	// @version         1.00-`strftime('%d%m%y')`
	// @author          MyRequiem [https://www.gwars.ru/info.php?id=2095458]
	// ==/UserScript==



snippet lint    lint settings
	/*global unsafeWindow */
	/*jslint browser: true, maxlen: 80 */

	/*eslint-env browser */
	/*eslint no-useless-escape: 'warn', linebreak-style: ['error', 'unix'],
		quotes: ['error', 'single'], semi: ['error', 'always'],
		eqeqeq: 'error', curly: 'error'
	*/

	/*jscs:disable requireMultipleVarDecl, requireVarDeclFirst */
	/*jscs:disable disallowKeywords, disallowDanglingUnderscores */
	/*jscs:disable validateIndentation */



snippet (f    (function () {
	(function () {
		'use strict';

		${1}

	}());


snippet cls    class ...
	/**
	 * @class ${1:}
	 * @constructor
	 */
	var $1 = function () {
		${2:}
	};

snippet clsG    class General
	/**
	 * @class General
	 * @constructor
	 */
	var General = function () {
		${1:}
	};

snippet prop    property ...
	/**
	 * @property ${1:}
	 * @type {${2}}
	 */
	this.$1 = ${3};
snippet proproot    property root
	/**
	 * @property root
	 * @type {Object}
	 */
	this.root = this.getRoot();
snippet propdoc    property doc
	/**
	 * @property doc
	 * @type {Object}
	 */
	this.doc = this.root.document;
snippet proploc    property loc
	/**
	 * @property loc
	 * @type {String}
	 */
	this.loc = this.root.location.href;
snippet propst    property st
	/**
	 * @property st
	 * @type {Object}
	 */
	this.st = this.root.localStorage;
snippet propstname    property STORAGENAME
	/**
	 * @property STORAGENAME
	 * @type {String}
	 */
	this.STORAGENAME = '${1}';
snippet propmyid    property myID
	/**
	 * @property myID
	 * @type {String}
	 */
	this.myID = /(^|;) ?uid=([^;]*)(;|$)/.exec(this.doc.cookie)[2];
snippet propdv    property DESIGN_VERSION
	/**
	 * @property DESIGN_VERSION
	 * @type {RegExpExecArray}
	 */
	this.DESIGN_VERSION = /(^|;) ?version=([^;]*)(;|$)/.
			exec(this.doc.cookie);
snippet propimgpath    property imgPath
	/**
	 * @property imgPath
	 * @type {String}
	 */
	this.imgPath = 'https://raw.githubusercontent.com/MyRequiem/' +
		'comfortablePlayingInGW/master/imgs/';
snippet propnojs    property nojs
	/**
	 * @property nojs
	 * @type {Boolean}
	 */
	this.nojs = /\/b0\/b\.php/.test(this.loc);
snippet prot    prototype
	/**
	 * @lends ${1:}.prototype
	 */
	$1.prototype = {
		${2}
	};

snippet protG    General.prototype
	/**
	 * @lends General.prototype
	 */
	General.prototype = {
		${1}
	};

snippet meth    method
	/**
	 * @method  ${1:}
	 * @param   {}
	 * @return  {}
	 */
	this.$1 = function () {
		${2:}
	};

snippet methprot    method prototype
	/**
	 * @method  ${1:}
	 * @param   {}
	 * @return  {}
	 */
	$1: function () {
		${2:}
	},

snippet methprotgetroot    method prototype getRoot
	/**
	 * @method  getRoot
	 * @return  {Object}
	 */
	getRoot: function () {
		var rt = typeof unsafeWindow;
		return rt !== 'undefined' ? unsafeWindow : window;
	},

snippet methprotsetdata    method prototype setData
	/**
	 * @method  setData
	 * @param   {Array} data
	 */
	setData: function (data) {
		this.st.setItem(this.STORAGENAME, data.join('|'));
	},

snippet methprotgetdata    method prototype getData
	/**
	 * @method  getData
	 * @return  {Array}
	 */
	getData: function () {
		var stData = this.st.getItem(this.STORAGENAME);
		if (stData) {
			return stData.split('|');
		}

		stData = [];
		this.setData(stData);
		return stData;
	},

snippet methprot$    method prototype $
	/**
	 * @method  \$
	 * @param   {String}    id
	 * @return  {HTMLElement|null}
	 */
	\$: function (id) {
		return this.doc.querySelector('#' + id);
	},

snippet for    for (...) {...}
	for (${1} = ${2}; ${1} < ${3}; ${1}++) {
		${4}
	}

snippet if    if (...) {...}
	if (${1:}) {
		${2:}
	}

snippet regtest    /.../.test(...);
	/${1:}/.test(${2:});
snippet regexec    /.../.exec(...);
	/${1:}/.exec(${2:});
snippet al    alert('...');
	alert('${1:}');
snippet alertst    if (!general.st) {alert('...')}
	if (!general.st) {
		alert('Ваш браузер не поддерживает технологию localStorage.\n' +
				'MyRequiеm рекомендует вам скачать и установить один из\n' +
				'ниже перечисленных браузеров или удалите скрипт\n' +
				'${1:}:\n\nFireFox 4+\nOpera 11+\nChrome 12+');

		return;
	}

snippet ajax    class AjaxQuery
	/**
	 * @class AjaxQuery
	 * @constructor
	 */
	var AjaxQuery = function () {
		/**
		 * @method  init
		 * @param   {String}    url
		 * @param   {Function}  onsuccess
		 * @param   {Function}  onfailure
		 */
		this.init = function (url, onsuccess, onfailure) {
			var xmlHttpRequest = new XMLHttpRequest();

			if (!xmlHttpRequest) {
				general.root.console.log('Error create xmlHttpRequest !!!');
				return;
			}

			xmlHttpRequest.open('GET', url, true);
			xmlHttpRequest.send(null);

			var timeout = general.root.setTimeout(function () {
				xmlHttpRequest.abort();
			}, 10000);

			xmlHttpRequest.onreadystatechange = function () {
				if (xmlHttpRequest.readyState === 4) {
					clearTimeout(timeout);
					if (xmlHttpRequest.status === 200) {
						onsuccess(xmlHttpRequest);
					} else {
						onfailure();
					}
				}
			};
		};
	};

snippet vargen    var general = new General();
	var general = new General();

